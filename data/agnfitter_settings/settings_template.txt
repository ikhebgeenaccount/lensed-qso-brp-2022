'''
AGNfitter setting file:
required:
  CATALOG_settings
  FILTERS_settings
  MCMC_settings
  OUTPUT_settings
For default use (test example with 2 redshifts and default filter set)
Change only the functions which state
***USER INPUT NEEDED***.
'''
import os
def CATALOG_settings():
    '''==================================
    ***USER INPUT NEEDED***
    Set the right values to be able to read your catalog's format.
    FITS option is not available yet.
    =================================='''
    cat = dict()
    ##GENERAL
    cat['path'] = {agnfitter_path}  #path to the AGNfitter code
    cat['filename'] = cat['path']+'data/{name}.txt'
    cat['filetype'] = 'ASCII' ## catalog file type: 'ASCII' or 'FITS'.
                              ## FITS option not available yet.
    cat['name'] = 0#'ID'            ## If ASCII: Column index (int) of source IDs
                                        ## If FITS: not yet
    cat['redshift'] = 1#'z'              ## If ASCII:  Column index(int) of redshift
                                        ## If FITS: not yet
    ##FREQUENCIES/WAVELENGTHS
    ## if ASCII specify 'freq/wl_list', if FITS specify 'freq/wl_suffix'
    cat['freq/wl_list'] = np.arange(2,{length},3).tolist()
                                        ## If ASCII: List of column indexes (int),
                                        ##           corresponding to freq/wl.
    #cat['freq/wl_suffix'] = '_wl'      ## If FITS: common ending to wavelength column names
    cat['freq/wl_format'] = 'wavelength' ## Gives your catalog *observed*
                                         ## 'frequency' or 'wavelength'?
    cat['freq/wl_unit'] = u.Angstrom       ## Astropy unit of freq or wavelength
    ##FLUXES
    ## if ASCII specify 'freq/wl_list', if FITS specify 'freq/wl_suffix'
    cat['flux_unit'] = u.mJy             ## Astropy unit of *flux* (astropy-units)
    cat['flux_list'] = np.arange(3,{length + 1},3).tolist()
                                        ## If ASCII: List of column indexes (int)
    #cat['flux_suffix'] = '_f'          ## If FITS: Common ending of all flux column names (str)
    cat['fluxerr_list'] = np.arange(4,{length + 2},3).tolist()
                                        ## If ASCII: List of column indexes (int)
    #cat['fluxerr_suffix'] = '_e'       ## If FITS: common ending to fluxerr column names (str)
    ##NON-DETECTIONS
    cat['ndflag_bool'] = False          ## Does you catalog has columns with flags 1(0) for
                                        ## detections (nondetections)?
    cat['ndflag_list'] = 'list'         ## If ASCII: List of column indexes (int)
                                        ## If FITS: List of column names (str)
    ## COSTUMIZED WORKING PATHS
    cat['workingpath'] = cat['path']  # Allows for a working path other than the AGNfitter code path.
                                      # Will include:
                                            # dictionary of models
                                            # SETTINGS_AGNFitter.py file
                                            # OUTPUT
                                      # Specially needed in order not to alter git original repository
                                      # and when using an external processor.
                                      # Default: cat['path'] (same as AGNfitter code path)
    cat['output_folder'] =  cat['workingpath'] +'OUTPUT/' #if no special OUTPUT folder, leave default
    cat['dict_path'] = cat['workingpath'] + 'models/MODELSDICT_default'
    return cat
def FILTERS_settings():
    '''==================================
    Set the photometric bands included in your catalog,
    in order to integrate the models over their response curves.
    =================================='''
    filters = dict()
    filters['dict_zarray'] =np.array([{redshift}])  # The grid of redshifts needed to fit your catalog
    filters['Bandset'] = 'BANDSET_settings' # OPTIONS:
                                           # 'BANDSET_default' (for testing)
                                           # 'BANDSET_settings' (choosing relevant filters below, as given by your catalog)
                                           # if your filter is not included, go to DICTIONARIES_AGNfitter to add.
{filters}
    return filters
def MCMC_settings():
    '''==================================
    Set your preferences for the MCMC sampling.
    =================================='''
    mc = dict()
    mc['Nwalkers'] = {nwalkers}  ## number of walkers
    mc['Nburnsets']= {nburnsets}   ## number of burn-in sets
    mc['Nburn'] = {nburn} ## length of each burn-in sets
    mc['Nmcmc'] = {nmcmc}  ## length of each burn-in sets
    mc['iprint'] = {iprint} ## show progress in terminal in steps of this many samples
    return mc
def OUTPUT_settings():
    '''==================================
    Set your preferences for the production of OUTPUT files.
    =================================='''
    out = dict()
    out['plot_format'] = 'pdf'
    #CHAIN TRACES
    out['plot_tracesburn-in'] = {plot_tracesburn-in}
    out['plot_tracesmcmc'] = {plot_tracesmcmc}
    #BASIC OUTPUT
    out['Nsample'] = 1000 ## out['Nsample'] * out['Nthinning'] <= out['Nmcmc']
    out['Nthinning'] = 10 ## This describes thinning of the chain to sample
    out['writepar_meanwitherrors'] = True ##Write output values for all parameters in a file.
    out['plot_posteriortriangle'] = {plot_posteriortriangle} ##Plot triangle with all parameters' PDFs?
    #INTEGRATED LUMINOSITIES
    out['calc_intlum'] = True
    out['realizations2int'] = {realizations2int} #This process is very time consuming.
                                #Around 100-1000 is recomendend for computational reasons.
                                #If you want to plot posterior triangles of
                                #the integrated luminosities, should be > 1000.
    out['plot_posteriortrianglewithluminosities'] = {plot_posteriortrianglewithluminosities}  # requires out['calc_intlum']=True
    #INTEGRATION RANGES
    out['intlum_models'] = ['sb','bbb', 'bbbdered', 'gal', 'tor','sb']  #leave 'sb' always
                                                                        #as first element
    out['intlum_freqranges_unit'] = u.micron   #Astropy unit
    out['intlum_freqranges'] = np.array([[8.,1000.],[0.1,1.],[0.1,1.],[0.1,1.],[1.,30.],[1.,30.]])
    out['intlum_names'] = ['LIR(8-1000)','Lbb(0.1-1)', 'Lbbdered(0.1-1)', 'Lga(01-1)', 'Ltor(1-30)','Lsb(1-30)']
    #SED PLOTTING
    out['realizations2plot'] = {realizations2plot}
    out['plotSEDrealizations'] = {plotSEDrealizations}
    return out
